name: Change Check

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  change-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Setup PHP and install tools
        uses: shivammathur/setup-php@2.30.2
        with:
          php-version: '8.2'

      - name: Install PHPCS, Variable Analysis, SQLFluff
        run: |
          composer require --dev "squizlabs/php_codesniffer=*"
          composer config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          composer require --dev dealerdirect/phpcodesniffer-composer-installer
          composer require --dev sirbrillig/phpcs-variable-analysis
          pip install sqlfluff

      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Determine if there is a previous commit
        run: |
          if git rev-parse HEAD^ > /dev/null 2>&1; then
            echo "HAS_PREVIOUS_COMMIT=true" >> $GITHUB_ENV
          else
            echo "HAS_PREVIOUS_COMMIT=false" >> $GITHUB_ENV
          fi

      - name: Find modified files in specified directories
        run: |
          if [ "$HAS_PREVIOUS_COMMIT" == "true" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || true)
            PHP_FILES=$(echo "$CHANGED_FILES" | grep -E 'var/www/sigge|var/lib/sigge/scripts|var/lib/sigge/plantillas_reportes|otros' | grep -E '\.php$' || true)
            SQL_FILES=$(echo "$CHANGED_FILES" | grep -E 'sql' | grep '\.sql$' || true)
            printf "PHP_FILES<<EOF\n%s\nEOF\n" "$PHP_FILES" >> $GITHUB_ENV
            printf "SQL_FILES<<EOF\n%s\nEOF\n" "$SQL_FILES" >> $GITHUB_ENV
          else
            echo "No previous commit to compare."
          fi

      - name: Run PHP Lint on modified PHP files
        if: env.PHP_FILES != ''
        run: |
            # Convertir la lista de archivos en un array
            IFS=$'\n' read -r -d '' -a php_files_array <<< "${{ env.PHP_FILES }}"
            # Iterar sobre cada archivo PHP
            for file in "${php_files_array[@]}"; do
              if [ -f "$file" ]; then
                php -l "$file" || echo "PHP Lint found issues in $file"
              else
                echo "El archivo PHP $file no existe o no fue encontrado."
              fi
            done
        
        - name: Run SQL Lint on modified SQL files
          if: env.SQL_FILES != ''
          run: |
            # Convertir la lista de archivos en un array
            IFS=$'\n' read -r -d '' -a sql_files_array <<< "${{ env.SQL_FILES }}"
            # Iterar sobre cada archivo SQL
            for file in "${sql_files_array[@]}"; do
              if [ -f "$file" ]; then
                sqlfluff lint --dialect postgres "$file" || echo "SQL Lint found issues in $file"
              else
                echo "El archivo SQL $file no existe o no fue encontrado."
              fi
            done
        
        - name: Run PHPCS on modified PHP files
          if: env.PHP_FILES != ''
          run: |
            # Convertir la lista de archivos en un array
            IFS=$'\n' read -r -d '' -a php_files_array <<< "${{ env.PHP_FILES }}"
            # Iterar sobre cada archivo PHP
            for file in "${php_files_array[@]}"; do
              if [ -f "$file" ]; then
                ./vendor/bin/phpcs --standard=VariableAnalysis "$file" || echo "PHPCS found issues in $file"
              else
                echo "El archivo PHP $file para PHPCS no existe o no fue encontrado."
              fi
            done        

      - name: No files modified
        if: env.PHP_FILES == '' && env.SQL_FILES == '' && env.HAS_PREVIOUS_COMMIT == 'true'
        run: echo "No PHP or SQL files have been modified."
